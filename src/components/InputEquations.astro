---
import Layout from "../layouts/Layout.astro";
---

<Layout title="input">
    <table id="matrix"></table>
    <div class="container"></div>
    <div id="clearEquations"></div>
    <div style="padding: 10px; display:flex; justify-content: center;">
        <button id="solveEquation" type="button" role="button" class="button">
            Resolver matriz
        </button>
    </div>
    <table id="LU"></table>
    <table id="gaussSediel"></table>
</Layout>

<script>
    import { lup, lusolve } from "mathjs";
    const table = document.querySelector("#matrix");
    const LUP = document.querySelector("#LU");
    const tableGaussSediel = document.querySelector("#gaussSediel");
    const addHeadersTable = () => {
        const tr = document.createElement("tr");
        for (let i = 0; i < 5; i++) {
            const th = document.createElement("th");
            const input = document.createElement("input");
            input.type = "text";
            if (i !== 4) {
                input.value = "X-" + `${i + 1}`;
                input.setAttribute(
                    "style",
                    "background-color: rgb(98, 249, 249, 0.133); border: 1px solid aqua; padding: 20px; margin: 15px 2px 5px 0px;max-width:100%; color: white; text-align: center;",
                );
                input.readOnly = true;
                input.setAttribute("col", `${i}`);
                input.setAttribute("row", `${i}`);
                th.appendChild(input);
                tr.appendChild(th);
            } else {
                input.value = "B";
                input.setAttribute(
                    "style",
                    "font-weight:400; border: 1px solid aqua; padding: 20px; margin: 15px 2px 5px 0px;max-width:100%; text-align: center;",
                );
                input.readOnly = true;
                input.setAttribute("col", `${i}`);
                input.setAttribute("row", `${i}`);
                th.appendChild(input);
                tr.appendChild(th);
            }
        }
        table.appendChild(tr);
    };
    const addCellsTable = (quantity, node, value = [], isReadOnly = false) => {
        const tBody = document.createElement("tBody");
        const trBody = document.createElement("tr");
        //Cantidad filas
        for (let i = 0; i < quantity + 1; i++) {
            const td = document.createElement("td");
            //Cantidad columnas
            for (let j = 0; j < quantity; j++) {
                const input = document.createElement("input");
                input.type = "text";
                input.setAttribute(
                    "style",
                    "background-color: rgba(121, 25, 115, 0.133); border: 1px solid rgb(241, 41, 241); padding: 20px; margin: 15px 2px 5px 0px;max-width:100%; color: white; text-align: center;",
                );
                input.readOnly = !isReadOnly ? false : true;
                input.value =
                    value[i] && value[i][j]
                        ? Number(value[i][j]).toFixed(2)
                        : "";
                input.setAttribute("row", `${j}`);
                input.setAttribute("col", `${i}`);
                td.appendChild(input);
            }
            trBody.appendChild(td);
            tBody.appendChild(trBody);
        }
        node.appendChild(tBody);
    };
    const x1 = [],
        x2 = [],
        x3 = [],
        x4 = [],
        b = [];
    const matrix = [x1, x2, x3, x4];
    const saveValues = () => {
        const cells = document.querySelectorAll("td");
        cells.forEach((td) => {
            const input = td.querySelectorAll("input");
            input.forEach((inp) => {
                inp.addEventListener("blur", (e) => {
                    if (e.target.value) {
                        if (e.target.getAttribute("col") === "0") {
                            x1.push(Number(e.target.value));
                        } else if (e.target.getAttribute("col") === "1") {
                            x2.push(Number(e.target.value));
                        } else if (e.target.getAttribute("col") === "2") {
                            x3.push(Number(e.target.value));
                        } else if (e.target.getAttribute("col") === "3") {
                            x4.push(Number(e.target.value));
                        } else {
                            b.push(Number(e.target.value));
                        }
                    }
                });
            });
        });
    };
    const showLU = (matrixLU) => {
        const { L, U } = matrixLU;
        const h4 = document.createElement("h4");
        h4.textContent = "LOWER";
        LUP.appendChild(h4);
        addCellsTable(L.length -1, LUP, L, true);
        const h41 = document.createElement("h4");
        h41.textContent = "UPPER";
        LUP.appendChild(h41);
        addCellsTable(L.length-1, LUP, U, true);
    };
    const LU = () => {
        const M = matrix;
        let contador = 1;
        while (contador < M.length) {
            for (let i = 0; i < M.length; i++) {
                if (M[i].length < 4) {
                    M[i].push(0);
                }
            }
            contador++
        }
        const LUM = lup(M);
        showLU(LUM);
    };
    const gaussSediel = () => {
        const M = matrix;
        const column = b;
        const x = lusolve(M, column);
        const h4 = document.createElement("h4");
        h4.textContent = "Resultado A * x = b";
        tableGaussSediel.appendChild(h4);
        const tBody = document.createElement("tBody");
        const trBody = document.createElement("tr");
        for (let i = 0; i < x.length; i++) {
            const td = document.createElement("td");
            td.innerHTML = `x-${i + 1}=${Number(x[i]).toFixed(2)} | `;
            trBody.appendChild(td);
            tBody.appendChild(trBody);
        }
        tableGaussSediel.appendChild(tBody);
    };
    window.addEventListener("DOMContentLoaded", () => {
        addHeadersTable();
        addCellsTable(4, table);
        saveValues();
    });
    const solveButton = document.getElementById("solveEquation");
    solveButton.addEventListener("click", () => {
        LU();
        gaussSediel();
    });
</script>

<style>
    .button {
        display: flex;
        justify-content: center;
        margin-top: 10px;
        background-color: rgba(40, 219, 115, 0.166);
        padding: 15px;
        color: white;
        outline: none;
        border: 1px solid aqua;
        cursor: pointer;
        font-size: large;
    }
</style>

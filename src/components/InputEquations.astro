---
import Layout from "../layouts/Layout.astro";
---

<Layout title="input">
    <div style="display:flex; justify-content:center;">
        <input
            id="dimentionMatrix"
            type="number"
            placeholder="Dimensión de la matriz"
        />
    </div>
    <div style="padding: 10px; display:flex; justify-content: center;">
        <button id="dimention" type="button" role="button" class="button">
            Dimensionar
        </button>
    </div>
    <table id="matrix"></table>
    <div style="padding: 10px; display:flex; justify-content: center;">
        <button id="solveMatrix" type="button" role="button" class="button">
            Resolver matriz
        </button>
    </div>
    <table id="LUP"></table>
    <table id="gaussSediel"></table>
</Layout>

<script>
    import { lup, lusolve } from "mathjs";

    const table = document.querySelector("#matrix");
    const dimention = document.querySelector("#dimention");
    const dimentionMatrix = document.querySelector("#dimentionMatrix");
    const solveMatrix = document.getElementById("solveMatrix");
    const tableGaussSediel = document.querySelector("#gaussSediel");
    const LUP = document.getElementById("LUP");
    const addHeadersTable = (quantity) => {
        const thead = document.createElement("thead");
        thead.setAttribute("style", "max-width:100%;");
        const tr = document.createElement("tr");
        for (let i = 0; i < quantity; i++) {
            const th = document.createElement("th");
            const input = document.createElement("input");
            input.type = "text";
            if (i !== quantity + 1) {
                input.value = "X-" + `${i + 1}`;
                input.setAttribute(
                    "style",
                    "background-color: rgb(98, 249, 249, 0.133); border: 1px solid aqua; padding: 20px; margin: 15px 2px 5px 0px; color: white; text-align: center;",
                );
                input.readOnly = true;
                input.setAttribute("col", `${i}`);
                input.setAttribute("row", `${i}`);
                th.appendChild(input);
                tr.appendChild(th);
                thead.appendChild(tr);
            }
        }
        table.appendChild(thead);
    };
    const addCellsTable = (quantity, node, value = [], isReadOnly = false) => {
        const tBody = document.createElement("tBody");
        const trBody = document.createElement("tr");
        //Cantidad filas
        for (let i = 0; i < quantity + 1; i++) {
            const td = document.createElement("td");
            //Cantidad columnas
            for (let j = 0; j < quantity; j++) {
                const input = document.createElement("input");
                input.type = "text";
                input.setAttribute(
                    "style",
                    "background-color: rgba(121, 25, 115, 0.133); border: 1px solid rgb(241, 41, 241); padding: 20px; margin: 15px 2px 5px 0px;max-width:100%; color: white; text-align: center;",
                );
                input.readOnly = !isReadOnly ? false : true;
                input.value =
                    value[i] && value[i][j]
                        ? Number(value[i][j]).toFixed(2)
                        : "";
                input.setAttribute("row", `${j}`);
                input.setAttribute("col", `${i}`);
                td.appendChild(input);
            }
            trBody.appendChild(td);
            tBody.appendChild(trBody);
        }
        node.appendChild(tBody);
    };

    const multiplyMatrix = (matrixOrigin, matrixB) => {
        let multiplicationResults = [];
        for (let i = 0; i < matrixOrigin.length; i++) {
            multiplicationResults[i] = [];
            for (let j = 0; j < matrixOrigin[i].length; j++) {
                multiplicationResults[i][j] = matrixOrigin[i][j] * matrixB[i];
            }
        }
        return multiplicationResults;
    };

    const getMainDiagonal = (matrixOrigin) => {
        let diagonal = [];
        for (let i = 0; i < matrixOrigin.length; i++) {
            diagonal[i] = [];
            for (let j = 0; j < matrixOrigin.length; j++) {
                //Si la fila i es igual a la columna j, es parte de la diagonal
                if (i === j) diagonal[i][j] = matrixOrigin[i][j];
            }
        }
        //Devuelve una matriz unidimensional
        return diagonal.flat();
    };

    const inverseDiagonal = (matrixDiagonal) => {
        let normalize = [];
        const inverseDiag = matrixDiagonal.map((element) => 1 / element);
        inverseDiag.forEach((el) => normalize.push(Number(el.toFixed(2))));
        //Me devuelve una matriz unidimensional
        return normalize;
    };

    const showLU = (matrixLU) => {
        const { L, U } = matrixLU;
        const h4 = document.createElement("h4");
        h4.textContent = "LOWER";
        LUP.appendChild(h4);
        addCellsTable(L.length, LUP, L, true);
        const h41 = document.createElement("h4");
        h41.textContent = "UPPER";
        LUP.appendChild(h41);
        addCellsTable(L.length, LUP, U, true);
    };

    const LU = () => {
        const LUM = lup([
            [0.25, 0.2, 0.06],
            [0.05, 0.81, 0.12],
            [0.35, -0.27, 0.08],
        ]);
        showLU(LUM);
    };
    const gaussSediel = (matrixOrigin, matrixB) => {
        LU();
        const mainDiagonal = getMainDiagonal(matrixOrigin);
        //Devuelve una matriz unidimensional
        const inverseD = inverseDiagonal(mainDiagonal);
        const originXinverse = multiplyMatrix(matrixOrigin, inverseD);
        const matrixBXInverseD = multiplyMatrix(
            matrixB.map((i) => [i]),
            inverseD,
        ).flat();
        const matrixResult = multiplyResultsLength(
            originXinverse,
            matrixBXInverseD,
        );
        const tr = document.createElement("tr");

        for (let i = 0; i < matrixResult.length; i++) {
            for (let j = 0; j < matrixResult.length; j++) {
                if (matrixResult[i][j] !== undefined) {
                    const td = document.createElement("td");
                    td.setAttribute(
                        "style",
                        "background-color: rgb(98, 249, 249, 0.133); border: 1px solid aqua; padding: 20px; margin: 15px 2px 5px 0px;max-width:100%; color: white; text-align: center;",
                    );
                    td.innerHTML = "x" + i + ": " + matrixResult[i][j];
                    tr.appendChild(td);
                }
            }
        }
        tableGaussSediel.appendChild(tr);
    };

    const multiplyResultsLength = (matrixA, matrixB) => {
        // let isCompatible = true;
        // for (let i = 0; i < matrixA.length; i++) {
        //     if (matrixA[i].length !== matrixB.length) {
        //         alert(
        //             "No existe una relación entre la diagonal principal y la matriz B",
        //         );
        //         isCompatible = false;
        //         break;
        //     }
        // }

        // if (isCompatible) {
        //     return lusolve(matrixA, matrixB);
        // }
        return lusolve(matrixA, matrixB);
    };

    dimention.addEventListener("click", () => {
        const rangeMatrix = Number(dimentionMatrix.value);
        if (rangeMatrix > 4 || rangeMatrix <= 1) {
            alert("Solo es permitido hasta 4x4");
            dimentionMatrix.value = " ";
        } else {
            addHeadersTable(rangeMatrix);
            addCellsTable(rangeMatrix, table);
        }
    });

    const matrixDouble = (lengthMatrix) => {
        let c = [];
        for (let i = 0; i < lengthMatrix; i++) {
            c[i] = [];
        }

        return c;
    };

    solveMatrix.addEventListener("click", () => {
        const cells = document.querySelectorAll("td>input");
        const rangeMatrix = Number(dimentionMatrix.value)+1;
        const matrixBi = matrixDouble(rangeMatrix);
        const B = []
        cells.forEach((input) => {
            const attrCol = Number(input.getAttribute("col"));
            const attrRow = Number(input.getAttribute("row"));
            if (input.value) {
                if(attrCol === (rangeMatrix)-1){
                    B.push(Number(input.value));
                }else{
                    matrixBi[attrRow][attrCol] = Number(input.value);
                }
            }
        });
        matrixBi.pop()
        gaussSediel(matrixBi, B)
    });
</script>

<style>
    .button {
        display: flex;
        justify-content: center;
        margin-top: 10px;
        background-color: rgba(40, 219, 115, 0.166);
        padding: 15px;
        color: white;
        outline: none;
        border: 1px solid aqua;
        cursor: pointer;
        font-size: large;
    }
    #dimentionMatrix {
        background-color: rgba(121, 25, 115, 0.133);
        border: 1px solid rgb(241, 41, 241);
        padding: 20px;
        width: 25%;
        color: white;
        text-align: center;
    }
</style>
